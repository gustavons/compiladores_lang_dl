Projeto resumido da linguagem DL

PROGRAM				::= programa ID BLOCK
BLOCK				::= inicio STMTS fim
STMTS				::= STMT; STMTS | ε
STMT				::= BLOCK | DECL | ASSIGN | WRITE | IF | WHILE
DECL     			::= TYPE ID
ASSIGN   			::= ID = EXPR
WRITE				::= escreva(ID)
IF					::= se (EXPR) STMT
WHILE 				::= enquanto (EXPR) STMT
EXPR				::= EXPR "|" EQUALITY | EQUALITY
EQUALITY			::= EQUALITY == REL | REL
REL					::= REL < ARITH | REL <= ARITH | ARITH
ARITH  				::= ARITH + TERM | ARITH - TERM | TERM | POW
POW					::= TERM ** POW | TERM
TERM				::= TERM * UNARY | UNARY
UNARY				::= - UNARY | FACTOR
FACTOR				::= (EXPR) | ID | LIT_INT | LIT_REAL | LIT_BOOL | LIT_CIEN

Definições Regulares
LETTER		::= a | b | ... | z | A | B | ... Z | _
DIGIT		::= 0 | 1 | ... | 9
ID			::= LETTER (LETTER | DIGIT)*
LIT_INT		::= DIGIT+
LIT_REAL	::= (DIGIT+ . DIGIT+) | (DIGIT . DIGIT e (+|-) DIGIT+)
LIT_BOOL	::= verdadeiro | falso
LIT_CIEN    ::= 
TYPE     	::= inteiro | real | booleano
